/* tslint:disable */
/* eslint-disable */
/**
 * cookFood - version 1.0.0
 *
 *
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type Object = object;
export type R = {
  code?: number;
  msg?: string;
  data?: Object;
};
declare global {
  interface Apis {
    recipe: {
      /**
       * ---
       *
       * [GET] getRecipeById
       *
       * **path:** /recipe/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_recipe_id<
        Config extends Alova2MethodConfig<R> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'recipe.get_recipe_id', Config>;
      /**
       * ---
       *
       * [GET] getRecipeByKeywords
       *
       * **path:** /recipe/keyword
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   keys: string[]
       *   // [required]
       *   fields: string[]
       *   // [required]
       *   page: number
       *   // [required]
       *   size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_recipe_keyword<
        Config extends Alova2MethodConfig<R> & {
          params: {
            /**
             * [required]
             */
            keys: string[];
            /**
             * [required]
             */
            fields: string[];
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'recipe.get_recipe_keyword', Config>;
      /**
       * ---
       *
       * [GET] getRecipeByName
       *
       * **path:** /recipe/name
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   name: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_recipe_name<
        Config extends Alova2MethodConfig<R> & {
          params: {
            /**
             * [required]
             */
            name: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'recipe.get_recipe_name', Config>;
      /**
       * ---
       *
       * [GET] getRecipePage
       *
       * **path:** /recipe/list
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   page: number
       *   // [required]
       *   size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_recipe_list<
        Config extends Alova2MethodConfig<R> & {
          params: {
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'recipe.get_recipe_list', Config>;
      /**
       * ---
       *
       * [GET] getIngredients
       *
       * **path:** /recipe/ingredients
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   ingredients: string[]
       *   // [required]
       *   fields: string[]
       *   // [required]
       *   page: number
       *   // [required]
       *   size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_recipe_ingredients<
        Config extends Alova2MethodConfig<R> & {
          params: {
            /**
             * [required]
             */
            ingredients: string[];
            /**
             * [required]
             */
            fields: string[];
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'recipe.get_recipe_ingredients', Config>;
      /**
       * ---
       *
       * [GET] getRecipeRandom
       *
       * **path:** /recipe/random/{count}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   count: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_recipe_random_count<
        Config extends Alova2MethodConfig<R> & {
          pathParams: {
            /**
             * [required]
             */
            count: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'recipe.get_recipe_random_count', Config>;
    };
    review: {
      /**
       * ---
       *
       * [GET] findListByRecipeId
       *
       * **path:** /review/{recipeId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   recipeId: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   page: number
       *   // [required]
       *   size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_review_recipeid<
        Config extends Alova2MethodConfig<R> & {
          pathParams: {
            /**
             * [required]
             */
            recipeId: string;
          };
          params: {
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'review.get_review_recipeid', Config>;
      /**
       * ---
       *
       * [POST] addReview
       *
       * **path:** /review
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   recipeId: string
       *   // [required]
       *   content: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      post_review<
        Config extends Alova2MethodConfig<R> & {
          params: {
            /**
             * [required]
             */
            recipeId: string;
            /**
             * [required]
             */
            content: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'review.post_review', Config>;
      /**
       * ---
       *
       * [DELETE] deleteReview
       *
       * **path:** /review/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      delete_review_id<
        Config extends Alova2MethodConfig<R> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'review.delete_review_id', Config>;
    };
    ingredient: {
      /**
       * ---
       *
       * [GET] getIngredientByName
       *
       * **path:** /ingredient/name
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   name: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_ingredient_name<
        Config extends Alova2MethodConfig<R> & {
          params: {
            /**
             * [required]
             */
            name: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'ingredient.get_ingredient_name', Config>;
      /**
       * ---
       *
       * [GET] getIngredientById
       *
       * **path:** /ingredient/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_ingredient_id<
        Config extends Alova2MethodConfig<R> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'ingredient.get_ingredient_id', Config>;
      /**
       * ---
       *
       * [GET] getIngredientByDescription
       *
       * **path:** /ingredient/description
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   keys: string[]
       *   // [required]
       *   page: number
       *   // [required]
       *   size: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_ingredient_description<
        Config extends Alova2MethodConfig<R> & {
          params: {
            /**
             * [required]
             */
            keys: string[];
            /**
             * [required]
             */
            page: number;
            /**
             * [required]
             */
            size: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'ingredient.get_ingredient_description', Config>;
    };
    user: {
      /**
       * ---
       *
       * [POST] login
       *
       * **path:** /user
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      post_user<Config extends Alova2MethodConfig<R>>(config?: Config): Alova2Method<R, 'user.post_user', Config>;
      /**
       * ---
       *
       * [GET] getUserInfo
       *
       * **path:** /user
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      get_user<Config extends Alova2MethodConfig<R>>(config?: Config): Alova2Method<R, 'user.get_user', Config>;
      /**
       * ---
       *
       * [PUT] updateUserName
       *
       * **path:** /user
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   name: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   msg?: string
       *   data?: object
       * }
       * ```
       */
      put_user<
        Config extends Alova2MethodConfig<R> & {
          params: {
            /**
             * [required]
             */
            name: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<R, 'user.put_user', Config>;
    };
  }

  var Apis: Apis;
}
